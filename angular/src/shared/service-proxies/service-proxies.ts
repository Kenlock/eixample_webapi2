/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.5.0 (NJsonSchema v9.13.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/operator/finally';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:50000";
    }

    /**
     * @return OK
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<RegisterOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterOutput>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterOutput>(<any>null);
    }

    /**
     * @param user_firstName (optional) 
     * @param user_lastName (optional) 
     * @param user_memberships (optional) 
     * @param user_email (optional) 
     * @param user_emailConfirmed (optional) 
     * @param user_passwordHash (optional) 
     * @param user_securityStamp (optional) 
     * @param user_phoneNumber (optional) 
     * @param user_phoneNumberConfirmed (optional) 
     * @param user_twoFactorEnabled (optional) 
     * @param user_lockoutEndDateUtc (optional) 
     * @param user_lockoutEnabled (optional) 
     * @param user_accessFailedCount (optional) 
     * @param user_id (optional) 
     * @param user_userName (optional) 
     * @return OK
     */
    getAuthToken(expires: moment.Moment, user_firstName: string | null | undefined, user_lastName: string | null | undefined, user_memberships: any[] | null | undefined, user_email: string | null | undefined, user_emailConfirmed: boolean | null | undefined, user_passwordHash: string | null | undefined, user_securityStamp: string | null | undefined, user_phoneNumber: string | null | undefined, user_phoneNumberConfirmed: boolean | null | undefined, user_twoFactorEnabled: boolean | null | undefined, user_lockoutEndDateUtc: moment.Moment | null | undefined, user_lockoutEnabled: boolean | null | undefined, user_accessFailedCount: number | null | undefined, user_id: string | null | undefined, user_userName: string | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Account/GetAuthToken?";
        if (expires === undefined || expires === null)
            throw new Error("The parameter 'expires' must be defined and cannot be null.");
        else
            url_ += "expires=" + encodeURIComponent(expires ? "" + expires.toJSON() : "") + "&"; 
        if (user_firstName !== undefined)
            url_ += "user.firstName=" + encodeURIComponent("" + user_firstName) + "&"; 
        if (user_lastName !== undefined)
            url_ += "user.lastName=" + encodeURIComponent("" + user_lastName) + "&"; 
        if (user_memberships !== undefined)
            user_memberships && user_memberships.forEach((item, index) => { 
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "user.memberships[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        if (user_email !== undefined)
            url_ += "user.email=" + encodeURIComponent("" + user_email) + "&"; 
        if (user_emailConfirmed !== undefined)
            url_ += "user.emailConfirmed=" + encodeURIComponent("" + user_emailConfirmed) + "&"; 
        if (user_passwordHash !== undefined)
            url_ += "user.passwordHash=" + encodeURIComponent("" + user_passwordHash) + "&"; 
        if (user_securityStamp !== undefined)
            url_ += "user.securityStamp=" + encodeURIComponent("" + user_securityStamp) + "&"; 
        if (user_phoneNumber !== undefined)
            url_ += "user.phoneNumber=" + encodeURIComponent("" + user_phoneNumber) + "&"; 
        if (user_phoneNumberConfirmed !== undefined)
            url_ += "user.phoneNumberConfirmed=" + encodeURIComponent("" + user_phoneNumberConfirmed) + "&"; 
        if (user_twoFactorEnabled !== undefined)
            url_ += "user.twoFactorEnabled=" + encodeURIComponent("" + user_twoFactorEnabled) + "&"; 
        if (user_lockoutEndDateUtc !== undefined)
            url_ += "user.lockoutEndDateUtc=" + encodeURIComponent(user_lockoutEndDateUtc ? "" + user_lockoutEndDateUtc.toJSON() : "") + "&"; 
        if (user_lockoutEnabled !== undefined)
            url_ += "user.lockoutEnabled=" + encodeURIComponent("" + user_lockoutEnabled) + "&"; 
        if (user_accessFailedCount !== undefined)
            url_ += "user.accessFailedCount=" + encodeURIComponent("" + user_accessFailedCount) + "&"; 
        if (user_id !== undefined)
            url_ += "user.id=" + encodeURIComponent("" + user_id) + "&"; 
        if (user_userName !== undefined)
            url_ += "user.userName=" + encodeURIComponent("" + user_userName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuthToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuthToken(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuthToken(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class AuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:50000";
    }

    /**
     * @return OK
     */
    authenticate(input: AuthenticateInput): Observable<AuthenticateOutput> {
        let url_ = this.baseUrl + "/api/Auth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateOutput>><any>_observableThrow(response_);
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<AuthenticateOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateOutput.fromJS(resultData200) : new AuthenticateOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateOutput>(<any>null);
    }

    /**
     * @param user_firstName (optional) 
     * @param user_lastName (optional) 
     * @param user_memberships (optional) 
     * @param user_email (optional) 
     * @param user_emailConfirmed (optional) 
     * @param user_passwordHash (optional) 
     * @param user_securityStamp (optional) 
     * @param user_phoneNumber (optional) 
     * @param user_phoneNumberConfirmed (optional) 
     * @param user_twoFactorEnabled (optional) 
     * @param user_lockoutEndDateUtc (optional) 
     * @param user_lockoutEnabled (optional) 
     * @param user_accessFailedCount (optional) 
     * @param user_id (optional) 
     * @param user_userName (optional) 
     * @return OK
     */
    getAuthToken(expires: moment.Moment, user_firstName: string | null | undefined, user_lastName: string | null | undefined, user_memberships: any[] | null | undefined, user_email: string | null | undefined, user_emailConfirmed: boolean | null | undefined, user_passwordHash: string | null | undefined, user_securityStamp: string | null | undefined, user_phoneNumber: string | null | undefined, user_phoneNumberConfirmed: boolean | null | undefined, user_twoFactorEnabled: boolean | null | undefined, user_lockoutEndDateUtc: moment.Moment | null | undefined, user_lockoutEnabled: boolean | null | undefined, user_accessFailedCount: number | null | undefined, user_id: string | null | undefined, user_userName: string | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Auth/GetAuthToken?";
        if (expires === undefined || expires === null)
            throw new Error("The parameter 'expires' must be defined and cannot be null.");
        else
            url_ += "expires=" + encodeURIComponent(expires ? "" + expires.toJSON() : "") + "&"; 
        if (user_firstName !== undefined)
            url_ += "user.firstName=" + encodeURIComponent("" + user_firstName) + "&"; 
        if (user_lastName !== undefined)
            url_ += "user.lastName=" + encodeURIComponent("" + user_lastName) + "&"; 
        if (user_memberships !== undefined)
            user_memberships && user_memberships.forEach((item, index) => { 
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "user.memberships[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        if (user_email !== undefined)
            url_ += "user.email=" + encodeURIComponent("" + user_email) + "&"; 
        if (user_emailConfirmed !== undefined)
            url_ += "user.emailConfirmed=" + encodeURIComponent("" + user_emailConfirmed) + "&"; 
        if (user_passwordHash !== undefined)
            url_ += "user.passwordHash=" + encodeURIComponent("" + user_passwordHash) + "&"; 
        if (user_securityStamp !== undefined)
            url_ += "user.securityStamp=" + encodeURIComponent("" + user_securityStamp) + "&"; 
        if (user_phoneNumber !== undefined)
            url_ += "user.phoneNumber=" + encodeURIComponent("" + user_phoneNumber) + "&"; 
        if (user_phoneNumberConfirmed !== undefined)
            url_ += "user.phoneNumberConfirmed=" + encodeURIComponent("" + user_phoneNumberConfirmed) + "&"; 
        if (user_twoFactorEnabled !== undefined)
            url_ += "user.twoFactorEnabled=" + encodeURIComponent("" + user_twoFactorEnabled) + "&"; 
        if (user_lockoutEndDateUtc !== undefined)
            url_ += "user.lockoutEndDateUtc=" + encodeURIComponent(user_lockoutEndDateUtc ? "" + user_lockoutEndDateUtc.toJSON() : "") + "&"; 
        if (user_lockoutEnabled !== undefined)
            url_ += "user.lockoutEnabled=" + encodeURIComponent("" + user_lockoutEnabled) + "&"; 
        if (user_accessFailedCount !== undefined)
            url_ += "user.accessFailedCount=" + encodeURIComponent("" + user_accessFailedCount) + "&"; 
        if (user_id !== undefined)
            url_ += "user.id=" + encodeURIComponent("" + user_id) + "&"; 
        if (user_userName !== undefined)
            url_ += "user.userName=" + encodeURIComponent("" + user_userName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuthToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuthToken(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuthToken(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class BaseAuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:50000";
    }

    /**
     * @param user_firstName (optional) 
     * @param user_lastName (optional) 
     * @param user_memberships (optional) 
     * @param user_email (optional) 
     * @param user_emailConfirmed (optional) 
     * @param user_passwordHash (optional) 
     * @param user_securityStamp (optional) 
     * @param user_phoneNumber (optional) 
     * @param user_phoneNumberConfirmed (optional) 
     * @param user_twoFactorEnabled (optional) 
     * @param user_lockoutEndDateUtc (optional) 
     * @param user_lockoutEnabled (optional) 
     * @param user_accessFailedCount (optional) 
     * @param user_id (optional) 
     * @param user_userName (optional) 
     * @return OK
     */
    getAuthToken(expires: moment.Moment, user_firstName: string | null | undefined, user_lastName: string | null | undefined, user_memberships: any[] | null | undefined, user_email: string | null | undefined, user_emailConfirmed: boolean | null | undefined, user_passwordHash: string | null | undefined, user_securityStamp: string | null | undefined, user_phoneNumber: string | null | undefined, user_phoneNumberConfirmed: boolean | null | undefined, user_twoFactorEnabled: boolean | null | undefined, user_lockoutEndDateUtc: moment.Moment | null | undefined, user_lockoutEnabled: boolean | null | undefined, user_accessFailedCount: number | null | undefined, user_id: string | null | undefined, user_userName: string | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/BaseAuth/GetAuthToken?";
        if (expires === undefined || expires === null)
            throw new Error("The parameter 'expires' must be defined and cannot be null.");
        else
            url_ += "expires=" + encodeURIComponent(expires ? "" + expires.toJSON() : "") + "&"; 
        if (user_firstName !== undefined)
            url_ += "user.firstName=" + encodeURIComponent("" + user_firstName) + "&"; 
        if (user_lastName !== undefined)
            url_ += "user.lastName=" + encodeURIComponent("" + user_lastName) + "&"; 
        if (user_memberships !== undefined)
            user_memberships && user_memberships.forEach((item, index) => { 
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "user.memberships[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        if (user_email !== undefined)
            url_ += "user.email=" + encodeURIComponent("" + user_email) + "&"; 
        if (user_emailConfirmed !== undefined)
            url_ += "user.emailConfirmed=" + encodeURIComponent("" + user_emailConfirmed) + "&"; 
        if (user_passwordHash !== undefined)
            url_ += "user.passwordHash=" + encodeURIComponent("" + user_passwordHash) + "&"; 
        if (user_securityStamp !== undefined)
            url_ += "user.securityStamp=" + encodeURIComponent("" + user_securityStamp) + "&"; 
        if (user_phoneNumber !== undefined)
            url_ += "user.phoneNumber=" + encodeURIComponent("" + user_phoneNumber) + "&"; 
        if (user_phoneNumberConfirmed !== undefined)
            url_ += "user.phoneNumberConfirmed=" + encodeURIComponent("" + user_phoneNumberConfirmed) + "&"; 
        if (user_twoFactorEnabled !== undefined)
            url_ += "user.twoFactorEnabled=" + encodeURIComponent("" + user_twoFactorEnabled) + "&"; 
        if (user_lockoutEndDateUtc !== undefined)
            url_ += "user.lockoutEndDateUtc=" + encodeURIComponent(user_lockoutEndDateUtc ? "" + user_lockoutEndDateUtc.toJSON() : "") + "&"; 
        if (user_lockoutEnabled !== undefined)
            url_ += "user.lockoutEnabled=" + encodeURIComponent("" + user_lockoutEnabled) + "&"; 
        if (user_accessFailedCount !== undefined)
            url_ += "user.accessFailedCount=" + encodeURIComponent("" + user_accessFailedCount) + "&"; 
        if (user_id !== undefined)
            url_ += "user.id=" + encodeURIComponent("" + user_id) + "&"; 
        if (user_userName !== undefined)
            url_ += "user.userName=" + encodeURIComponent("" + user_userName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuthToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuthToken(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuthToken(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:50000";
    }

    /**
     * @return OK
     */
    getCurrentLoginDetails(): Observable<GetCurrentLoginDetailsOutput> {
        let url_ = this.baseUrl + "/api/Session/GetCurrentLoginDetails";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentLoginDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentLoginDetails(<any>response_);
                } catch (e) {
                    return <Observable<GetCurrentLoginDetailsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCurrentLoginDetailsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentLoginDetails(response: HttpResponseBase): Observable<GetCurrentLoginDetailsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginDetailsOutput.fromJS(resultData200) : new GetCurrentLoginDetailsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCurrentLoginDetailsOutput>(<any>null);
    }

    /**
     * @return OK
     */
    getCurrentUserData(): Observable<GetCurrentUserDataOutput> {
        let url_ = this.baseUrl + "/api/Session/GetCurrentUserData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUserData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUserData(<any>response_);
                } catch (e) {
                    return <Observable<GetCurrentUserDataOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCurrentUserDataOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentUserData(response: HttpResponseBase): Observable<GetCurrentUserDataOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentUserDataOutput.fromJS(resultData200) : new GetCurrentUserDataOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCurrentUserDataOutput>(<any>null);
    }
}

@Injectable()
export class TeamServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:50000";
    }

    /**
     * @return OK
     */
    add(input: TeamDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Team/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * @return OK
     */
    update(input: TeamDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Team/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * @return OK
     */
    delete(input: TeamDto): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Team/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * @return OK
     */
    getAll(): Observable<TeamDto[]> {
        let url_ = this.baseUrl + "/api/Team/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
				"Authorization": "Bearer " + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<TeamDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TeamDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<TeamDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TeamDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TeamDto[]>(<any>null);
    }
}

export class RegisterInput implements IRegisterInput {
    firstName: string;
    lastName: string;
    userName: string;
    email: string;
    password: string;
    confirmPassword: string | undefined;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["FirstName"];
            this.lastName = data["LastName"];
            this.userName = data["UserName"];
            this.email = data["Email"];
            this.password = data["Password"];
            this.confirmPassword = data["ConfirmPassword"];
        }
    }

    static fromJS(data: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["UserName"] = this.userName;
        data["Email"] = this.email;
        data["Password"] = this.password;
        data["ConfirmPassword"] = this.confirmPassword;
        return data; 
    }

    clone(): RegisterInput {
        const json = this.toJSON();
        let result = new RegisterInput();
        result.init(json);
        return result;
    }
}

export interface IRegisterInput {
    firstName: string;
    lastName: string;
    userName: string;
    email: string;
    password: string;
    confirmPassword: string | undefined;
}

export class RegisterOutput implements IRegisterOutput {
    token: string | undefined;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["Token"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Token"] = this.token;
        return data; 
    }

    clone(): RegisterOutput {
        const json = this.toJSON();
        let result = new RegisterOutput();
        result.init(json);
        return result;
    }
}

export interface IRegisterOutput {
    token: string | undefined;
}

export class ApplicationUser implements IApplicationUser {
    firstName: string | undefined;
    lastName: string | undefined;
    memberships: Membership[] | undefined;
    email: string | undefined;
    emailConfirmed: boolean | undefined;
    passwordHash: string | undefined;
    securityStamp: string | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean | undefined;
    twoFactorEnabled: boolean | undefined;
    lockoutEndDateUtc: moment.Moment | undefined;
    lockoutEnabled: boolean | undefined;
    accessFailedCount: number | undefined;
    roles: IdentityUserRole[] | undefined;
    claims: IdentityUserClaim[] | undefined;
    logins: IdentityUserLogin[] | undefined;
    id: string | undefined;
    userName: string | undefined;

    constructor(data?: IApplicationUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["FirstName"];
            this.lastName = data["LastName"];
            if (data["Memberships"] && data["Memberships"].constructor === Array) {
                this.memberships = [];
                for (let item of data["Memberships"])
                    this.memberships.push(Membership.fromJS(item));
            }
            this.email = data["Email"];
            this.emailConfirmed = data["EmailConfirmed"];
            this.passwordHash = data["PasswordHash"];
            this.securityStamp = data["SecurityStamp"];
            this.phoneNumber = data["PhoneNumber"];
            this.phoneNumberConfirmed = data["PhoneNumberConfirmed"];
            this.twoFactorEnabled = data["TwoFactorEnabled"];
            this.lockoutEndDateUtc = data["LockoutEndDateUtc"] ? moment(data["LockoutEndDateUtc"].toString()) : <any>undefined;
            this.lockoutEnabled = data["LockoutEnabled"];
            this.accessFailedCount = data["AccessFailedCount"];
            if (data["Roles"] && data["Roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["Roles"])
                    this.roles.push(IdentityUserRole.fromJS(item));
            }
            if (data["Claims"] && data["Claims"].constructor === Array) {
                this.claims = [];
                for (let item of data["Claims"])
                    this.claims.push(IdentityUserClaim.fromJS(item));
            }
            if (data["Logins"] && data["Logins"].constructor === Array) {
                this.logins = [];
                for (let item of data["Logins"])
                    this.logins.push(IdentityUserLogin.fromJS(item));
            }
            this.id = data["Id"];
            this.userName = data["UserName"];
        }
    }

    static fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        if (this.memberships && this.memberships.constructor === Array) {
            data["Memberships"] = [];
            for (let item of this.memberships)
                data["Memberships"].push(item.toJSON());
        }
        data["Email"] = this.email;
        data["EmailConfirmed"] = this.emailConfirmed;
        data["PasswordHash"] = this.passwordHash;
        data["SecurityStamp"] = this.securityStamp;
        data["PhoneNumber"] = this.phoneNumber;
        data["PhoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["TwoFactorEnabled"] = this.twoFactorEnabled;
        data["LockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : <any>undefined;
        data["LockoutEnabled"] = this.lockoutEnabled;
        data["AccessFailedCount"] = this.accessFailedCount;
        if (this.roles && this.roles.constructor === Array) {
            data["Roles"] = [];
            for (let item of this.roles)
                data["Roles"].push(item.toJSON());
        }
        if (this.claims && this.claims.constructor === Array) {
            data["Claims"] = [];
            for (let item of this.claims)
                data["Claims"].push(item.toJSON());
        }
        if (this.logins && this.logins.constructor === Array) {
            data["Logins"] = [];
            for (let item of this.logins)
                data["Logins"].push(item.toJSON());
        }
        data["Id"] = this.id;
        data["UserName"] = this.userName;
        return data; 
    }

    clone(): ApplicationUser {
        const json = this.toJSON();
        let result = new ApplicationUser();
        result.init(json);
        return result;
    }
}

export interface IApplicationUser {
    firstName: string | undefined;
    lastName: string | undefined;
    memberships: Membership[] | undefined;
    email: string | undefined;
    emailConfirmed: boolean | undefined;
    passwordHash: string | undefined;
    securityStamp: string | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean | undefined;
    twoFactorEnabled: boolean | undefined;
    lockoutEndDateUtc: moment.Moment | undefined;
    lockoutEnabled: boolean | undefined;
    accessFailedCount: number | undefined;
    roles: IdentityUserRole[] | undefined;
    claims: IdentityUserClaim[] | undefined;
    logins: IdentityUserLogin[] | undefined;
    id: string | undefined;
    userName: string | undefined;
}

export class Membership implements IMembership {
    userId: string | undefined;
    user: ApplicationUser | undefined;
    tenantId: number | undefined;
    tenant: Tenant | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;

    constructor(data?: IMembership) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["UserId"];
            this.user = data["User"] ? ApplicationUser.fromJS(data["User"]) : <any>undefined;
            this.tenantId = data["TenantId"];
            this.tenant = data["Tenant"] ? Tenant.fromJS(data["Tenant"]) : <any>undefined;
            this.creationTime = data["CreationTime"] ? moment(data["CreationTime"].toString()) : <any>undefined;
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): Membership {
        data = typeof data === 'object' ? data : {};
        let result = new Membership();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId;
        data["User"] = this.user ? this.user.toJSON() : <any>undefined;
        data["TenantId"] = this.tenantId;
        data["Tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["CreationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["Id"] = this.id;
        return data; 
    }

    clone(): Membership {
        const json = this.toJSON();
        let result = new Membership();
        result.init(json);
        return result;
    }
}

export interface IMembership {
    userId: string | undefined;
    user: ApplicationUser | undefined;
    tenantId: number | undefined;
    tenant: Tenant | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class IdentityUserRole implements IIdentityUserRole {
    userId: string | undefined;
    roleId: string | undefined;

    constructor(data?: IIdentityUserRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["UserId"];
            this.roleId = data["RoleId"];
        }
    }

    static fromJS(data: any): IdentityUserRole {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserId"] = this.userId;
        data["RoleId"] = this.roleId;
        return data; 
    }

    clone(): IdentityUserRole {
        const json = this.toJSON();
        let result = new IdentityUserRole();
        result.init(json);
        return result;
    }
}

export interface IIdentityUserRole {
    userId: string | undefined;
    roleId: string | undefined;
}

export class IdentityUserClaim implements IIdentityUserClaim {
    id: number | undefined;
    userId: string | undefined;
    claimType: string | undefined;
    claimValue: string | undefined;

    constructor(data?: IIdentityUserClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.userId = data["UserId"];
            this.claimType = data["ClaimType"];
            this.claimValue = data["ClaimValue"];
        }
    }

    static fromJS(data: any): IdentityUserClaim {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["UserId"] = this.userId;
        data["ClaimType"] = this.claimType;
        data["ClaimValue"] = this.claimValue;
        return data; 
    }

    clone(): IdentityUserClaim {
        const json = this.toJSON();
        let result = new IdentityUserClaim();
        result.init(json);
        return result;
    }
}

export interface IIdentityUserClaim {
    id: number | undefined;
    userId: string | undefined;
    claimType: string | undefined;
    claimValue: string | undefined;
}

export class IdentityUserLogin implements IIdentityUserLogin {
    loginProvider: string | undefined;
    providerKey: string | undefined;
    userId: string | undefined;

    constructor(data?: IIdentityUserLogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginProvider = data["LoginProvider"];
            this.providerKey = data["ProviderKey"];
            this.userId = data["UserId"];
        }
    }

    static fromJS(data: any): IdentityUserLogin {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserLogin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LoginProvider"] = this.loginProvider;
        data["ProviderKey"] = this.providerKey;
        data["UserId"] = this.userId;
        return data; 
    }

    clone(): IdentityUserLogin {
        const json = this.toJSON();
        let result = new IdentityUserLogin();
        result.init(json);
        return result;
    }
}

export interface IIdentityUserLogin {
    loginProvider: string | undefined;
    providerKey: string | undefined;
    userId: string | undefined;
}

export class Tenant implements ITenant {
    name: string | undefined;
    hostName: string | undefined;
    isDeleted: boolean | undefined;
    creationTime: moment.Moment | undefined;
    deletionTime: moment.Moment | undefined;
    id: number | undefined;

    constructor(data?: ITenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["Name"];
            this.hostName = data["HostName"];
            this.isDeleted = data["IsDeleted"];
            this.creationTime = data["CreationTime"] ? moment(data["CreationTime"].toString()) : <any>undefined;
            this.deletionTime = data["DeletionTime"] ? moment(data["DeletionTime"].toString()) : <any>undefined;
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): Tenant {
        data = typeof data === 'object' ? data : {};
        let result = new Tenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["HostName"] = this.hostName;
        data["IsDeleted"] = this.isDeleted;
        data["CreationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["DeletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["Id"] = this.id;
        return data; 
    }

    clone(): Tenant {
        const json = this.toJSON();
        let result = new Tenant();
        result.init(json);
        return result;
    }
}

export interface ITenant {
    name: string | undefined;
    hostName: string | undefined;
    isDeleted: boolean | undefined;
    creationTime: moment.Moment | undefined;
    deletionTime: moment.Moment | undefined;
    id: number | undefined;
}

export class AuthenticateInput implements IAuthenticateInput {
    userName: string | undefined;
    password: string | undefined;
    rememberMe: boolean | undefined;

    constructor(data?: IAuthenticateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["UserName"];
            this.password = data["Password"];
            this.rememberMe = data["RememberMe"];
        }
    }

    static fromJS(data: any): AuthenticateInput {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserName"] = this.userName;
        data["Password"] = this.password;
        data["RememberMe"] = this.rememberMe;
        return data; 
    }

    clone(): AuthenticateInput {
        const json = this.toJSON();
        let result = new AuthenticateInput();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateInput {
    userName: string | undefined;
    password: string | undefined;
    rememberMe: boolean | undefined;
}

export class AuthenticateOutput implements IAuthenticateOutput {
    token: string | undefined;

    constructor(data?: IAuthenticateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["Token"];
        }
    }

    static fromJS(data: any): AuthenticateOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Token"] = this.token;
        return data; 
    }

    clone(): AuthenticateOutput {
        const json = this.toJSON();
        let result = new AuthenticateOutput();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateOutput {
    token: string | undefined;
}

export class GetCurrentLoginDetailsOutput implements IGetCurrentLoginDetailsOutput {
    tenant: TenantDto | undefined;
    user: UserDto | undefined;

    constructor(data?: IGetCurrentLoginDetailsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenant = data["Tenant"] ? TenantDto.fromJS(data["Tenant"]) : <any>undefined;
            this.user = data["User"] ? UserDto.fromJS(data["User"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginDetailsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentLoginDetailsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["User"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetCurrentLoginDetailsOutput {
        const json = this.toJSON();
        let result = new GetCurrentLoginDetailsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCurrentLoginDetailsOutput {
    tenant: TenantDto | undefined;
    user: UserDto | undefined;
}

export class TenantDto implements ITenantDto {
    name: string | undefined;
    hostName: string | undefined;
    id: number | undefined;

    constructor(data?: ITenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["Name"];
            this.hostName = data["HostName"];
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["HostName"] = this.hostName;
        data["Id"] = this.id;
        return data; 
    }

    clone(): TenantDto {
        const json = this.toJSON();
        let result = new TenantDto();
        result.init(json);
        return result;
    }
}

export interface ITenantDto {
    name: string | undefined;
    hostName: string | undefined;
    id: number | undefined;
}

export class UserDto implements IUserDto {
    firstName: string | undefined;
    lastName: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    id: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstName = data["FirstName"];
            this.lastName = data["LastName"];
            this.userName = data["UserName"];
            this.email = data["Email"];
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["UserName"] = this.userName;
        data["Email"] = this.email;
        data["Id"] = this.id;
        return data; 
    }

    clone(): UserDto {
        const json = this.toJSON();
        let result = new UserDto();
        result.init(json);
        return result;
    }
}

export interface IUserDto {
    firstName: string | undefined;
    lastName: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    id: string | undefined;
}

export class GetCurrentUserDataOutput implements IGetCurrentUserDataOutput {
    user: UserDto | undefined;

    constructor(data?: IGetCurrentUserDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["User"] ? UserDto.fromJS(data["User"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentUserDataOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentUserDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["User"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetCurrentUserDataOutput {
        const json = this.toJSON();
        let result = new GetCurrentUserDataOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCurrentUserDataOutput {
    user: UserDto | undefined;
}

export class TeamDto implements ITeamDto {
    name: string | undefined;
    description: string | undefined;
    id: number | undefined;

    constructor(data?: ITeamDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["Name"];
            this.description = data["Description"];
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): TeamDto {
        data = typeof data === 'object' ? data : {};
        let result = new TeamDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["Description"] = this.description;
        data["Id"] = this.id;
        return data; 
    }

    clone(): TeamDto {
        const json = this.toJSON();
        let result = new TeamDto();
        result.init(json);
        return result;
    }
}

export interface ITeamDto {
    name: string | undefined;
    description: string | undefined;
    id: number | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}